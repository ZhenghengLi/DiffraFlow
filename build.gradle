buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2"
        }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
    apply from: "$rootDir/gradle/dependencies.gradle"
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:$versions.taskTree"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    gradleVersion = "$versions.gradle"
    minJavaVersion = "8"
}

apply from: file('wrapper.gradle')
apply plugin: "com.dorongold.task-tree"

subprojects {
    println "Project '$project.name'"
}

// java projects

project(":dispatcher") {
    apply plugin: 'java'
    dependencies {
        implementation libs.commonsCli
        implementation libs.kafkaClients
    }
    tasks.create(name: "copyLibs", type: Copy) {
        from configurations.default
        into "${buildDir}/libs"
    }
    build.dependsOn("copyLibs")
}

project(":testing") {
    apply plugin: 'java'
    dependencies {
        implementation libs.commonsCli
    }
    tasks.create(name: "copyLibs", type: Copy) {
        from configurations.default
        into "${buildDir}/libs"
    }
    build.dependsOn("copyLibs")
}

// c++ projects

// before build, set the following environment variables for external libraries:
// (1) CPATH: instead of using -I option when compiling,
// (2) LIBRARY_PATH: instead of using -L option when linking.

// cpp-libary

project(":common") {
    apply plugin: 'cpp-library'
    library {
        linkage = [Linkage.SHARED]
        binaries.configureEach {
            compileTask.get().compilerArgs.add('-Wall')
        }
    }
    build.dependsOn("assembleRelease")
}

// cpp-application

project(":combiner") {
    apply plugin: 'cpp-application'
    application {
        targetMachines.add(machines.linux.x86_64)
        binaries.configureEach {
            compileTask.get().compilerArgs.add('-Wall')
            linkTask.get().linkerArgs.add('-pthread')
            linkTask.get().linkerArgs.add('-lrdkafka++')
        }
        dependencies {
            implementation project(":common")
        }
    }
    build.dependsOn("assembleRelease")
}

project(":ingester") {
    apply plugin: 'cpp-application'
    application {
        targetMachines.add(machines.linux.x86_64)
        binaries.configureEach {
            compileTask.get().compilerArgs.add('-Wall')
            linkTask.get().linkerArgs.add('-pthread')
        }
        dependencies {
            implementation project(":common")
        }
    }
    build.dependsOn("assembleRelease")
}

project(":monitor") {
    apply plugin: 'cpp-application'
    application {
        targetMachines.add(machines.linux.x86_64)
        binaries.configureEach {
            compileTask.get().compilerArgs.add('-Wall')
            linkTask.get().linkerArgs.add('-pthread')
        }
        dependencies {
            implementation project(":common")
        }
    }
    build.dependsOn("assembleRelease")
}

apply plugin: "base"

def install_dir = hasProperty('installDir') ? installDir : "$buildDir/install"

tasks.create(name:'install', type: Copy) {
    into install_dir
    // java application
    for (name in ['dispatcher', 'testing']) {
        dependsOn(":$name:assemble")
        from(project(":$name").jar) { into("jar") }
        from(project(":$name").configurations.default) { into ("jar") }
    }
    // c++ application
    for (name in ['combiner', 'ingester', 'monitor']) {
        dependsOn(":$name:assembleRelease")
        from("$name/build/exe/main/release/stripped/$name"  ) { into("bin") }
    }
    // c++ library
    for (name in ['common']) {
        dependsOn(":$name:assembleRelease")
        from("$name/build/lib/main/release/stripped/lib${name}.so") { into("lib") }
    }
    // configuration
    from("config") { into("conf") }
}

build.dependsOn("install")

