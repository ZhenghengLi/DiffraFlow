/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2"
        }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
    apply from: "$rootDir/gradle/dependencies.gradle"
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:$versions.taskTree"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    gradleVersion = "$versions.gradle"
    minJavaVersion = "8"
}

apply from: file('wrapper.gradle')
apply plugin: "com.dorongold.task-tree"

subprojects {
    println "Project '$project.name'"
}

project(":dispatcher") {
    apply plugin: 'java'
    dependencies {
        implementation libs.commonsCli
        implementation libs.kafkaClients
    }
    tasks.create(name: "copyLibs", type: Copy) {
        from configurations.default
        into "${buildDir}/libs"
    }
    build.dependsOn("copyLibs")
}

project(":combiner") {
    apply plugin: 'cpp-application'
    application {
        targetMachines.add(machines.linux.x86_64)
        binaries.configureEach {
            linkTask.get().linkerArgs.add('-pthread')
        }
    }
    build.dependsOn("assembleRelease")
    // external libraries
    // librdkafka
    def librdkafka_include = file("${cpplibs.librdkafka}/include")
    def librdkafka_cpp_so = file("${cpplibs.librdkafka}/lib/librdkafka++.so.1")
    def librdkafka_c_so = file("${cpplibs.librdkafka}/lib/librdkafka.so.1")
    // hdf5
    // ...
    gradle.taskGraph.whenReady { taskGraph ->
        // librdkakfa
        if (!taskGraph.hasTask(":help")) {
            if (!librdkafka_include.exists() || !librdkafka_cpp_so.exists() || !librdkafka_c_so.exists()) {
                throw new GradleException("Please ensure to install librdkafka and set the correct paths.")
            }
        }
        // hdf5
        // ...
    }
    components.main.binaries.whenElementFinalized { binary ->
        project.dependencies {
            // librdkafka
            add(binary.includePathConfiguration.name, files(librdkafka_include))
            add(binary.linkLibraries.name, files(librdkafka_cpp_so, librdkafka_c_so))
            add(binary.runtimeLibraries.name, files(librdkafka_cpp_so, librdkafka_c_so))
            // hdf5
            // ...
        }
    }
}

