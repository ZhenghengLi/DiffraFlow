1. one character name for each endpoint:
    sender       -> F
    dispatcher   -> D
    combiner     -> C
    ingester     -> E
    trigger      -> B

2. common data format for transfering:
    [header(4)|size(4)|type(4)|payload(size-4)]

3. definition for different payload types
    (1) 0xABCDFFFF: single raw image frame data
        - payload format: [key(8)|data(size-8)]

    (2) 0xABCDFF00: uncompressed byte sequence of raw image frame data
        - payload format: [imgct(4)|frmsz1(4)|frmdt1(frmsz1)|frmsz2(4)|frmdt2(frmsz2)|...]
    (3) 0xABCDFF01: LZ4 compressed byte sequence of raw image frame data
        - payload format: [imgct(4)|compressed(frmsz1(4)|frmdt1(frmsz1)|frmsz2(4)|frmdt2(frmsz2)|...)]
    (4) 0xABCDFF02: Snappy compressed byte sequence of raw image frame data
        - payload format: [imgct(4)|compressed(frmsz1(4)|frmdt1(frmsz1)|frmsz2(4)|frmdt2(frmsz2)|...)]
    (5) 0xABCDFF03: ZSTD compressed byte sequence of raw image frame data
        - payload format: [imgct(4)|compressed(frmsz1(4)|frmdt1(frmsz1)|frmsz2(4)|frmdt2(frmsz2)|...)]

    (6) 0xEEEEABCD: request for image data
        - payload format: [imgct(4)]
    (7) 0xABCDEEEE: single merged full image data
        - note: MassagePack serialized ImageData object

4. binary protocol between different endpoints:
    (1) TCP: sender -> dispatcher (push)
        greeting:    0xFFDD1234    (int)4      | (uint)id
        return code: succ(1234)    fail(4321)
        transfering: 0xFFF22DDD    (int)size   | (uint)type   (char[])payload

    (2) TCP: dispatcher -> combiner (push)
        greeting:    0xDDCC1234    (int)4      | (uint)id
        return code: succ(1234)    fail(4321)
        transfering: 0xDDD22CCC    (int)size   | (uint)type   (char[])payload

    (3) TCP: ingester -> combiner (pull)
        greeting:    0xEECC1234    (int)4      | (int)id
        return code: succ(1234)    fail(4321)
        request:     0xEEE22CCC    (int)size   | (uint)type   (uint)imgct
        response:    0xCCC22EEE    (int)size   | (uint)type   (char[])payload

    (4) TCP: trigger -> sender (push)
        greeting:    0xBBFF1234    (int)4      | (int)id
        return code: succ(1234)    fail(4321)
        foreward:    0xBBB22FFF    (int)4      | (uint)bunch_id
        backward:    0xFFF22BBB    (int)4      | (uint)result

5. REST API
    (1) GET: monitor -> ingester (round-robin)
    (2) GET: controller -> monitor (round-robin)
    (3) PUT: client -> controller ~> ZooKeeper
